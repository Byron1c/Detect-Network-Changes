; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Detect Network Changes"
;#define MyAppNameSHORT "RRR"
#define MyAppVersion "0.9.0.0_RC"           
#define MyAppPublisher "Strangetimez"
#define MyAppURL "http://www.strangetimez.com/Blog/?page_id=478"
#define MyAppExeName "DetectNetworkChanges.exe"
#define MyAppDataPathName "DetectNetworkChanges"
             

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{37BF307D-42B6-40CB-9064-3C157CB96FDE}
AppName = {#MyAppName}
; {#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={commonpf}\{#MyAppDataPathName}
DefaultGroupName={#MyAppDataPathName}
AllowNoIcons=yes
LicenseFile=E:\Users\Troy\Dropbox\@Backup\VisualStudio\DetectNetworkChanges\Installer\License.txt
InfoBeforeFile=E:\Users\Troy\Dropbox\@Backup\VisualStudio\DetectNetworkChanges\Installer\PreInstallInfo.txt
InfoAfterFile=E:\Users\Troy\Dropbox\@Backup\VisualStudio\DetectNetworkChanges\Installer\PostInstallInfo.txt
OutputDir=E:\Users\Troy\Dropbox\@Backup\VisualStudio\DetectNetworkChanges\Installer\Output
OutputBaseFilename=DetectNetworkChanges_Setup_{#MyAppVersion}  
SetupIconFile=E:\Users\Troy\Dropbox\@Backup\VisualStudio\DetectNetworkChanges\Images\DetectNetworkConnection-Icon1.ico
Compression=lzma
SolidCompression=yes
CloseApplications=yes
UsePreviousAppDir=no


[UninstallRun]


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Dirs]
Name: {app}; Permissions: users-full  

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\DetectNetworkChanges\DetectNetworkChanges\bin\Debug\DetectNetworkChanges.exe"; DestDir: "{app}"; Flags: ignoreversion; Check:IsDotNet4Detected 
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\DetectNetworkChanges\DetectNetworkChanges\bin\Debug\Icon.ico"; DestDir: "{app}"; Flags: ignoreversion 
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\DetectNetworkChanges\DetectNetworkChanges\bin\Debug\Icon_Problem.ico"; DestDir: "{app}"; Flags: ignoreversion 
Source: "E:\Users\Troy\Dropbox\@Backup\VisualStudio\DetectNetworkChanges\Installer\Uninstall.bat"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppDataPathName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppDataPathName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppDataPathName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppExeName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

;[UninstallDelete]
;;This works only if it is installed in default location
;Type: filesandordirs; Name: "{pf}\{#MyAppName}"





[CustomMessages]
dotnetmissing = DetectNetworkChanges needs the Microsoft .NET Framework %nto be installed in your copy of Windows. %n%nTherefore please : %n - Download and run the .NET Framework install program, and %n - Then run this setup program again. %n%nWould you like to install .NET from Microsoft now? %n%n
dotnetok = DOT NET 4.7 DETECTED
confirmdeletedata = Would you like to remove the Settings, Activity Log, Quotes, and error log files?

[Code]

function IsDotNetDetected(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1'          .NET Framework 1.1
//    'v2.0'          .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//    'v4.5.1'        .NET Framework 4.5.1
//    'v4.5.2'        .NET Framework 4.5.2
//    'v4.6'          .NET Framework 4.6
//    'v4.6.1'        .NET Framework 4.6.1
//    'v4.6.2'        .NET Framework 4.6.2
//    'v4.7'          .NET Framework 4.7
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var
    key, versionKey: string;
    install, release, serviceCount, versionRelease: cardinal;
    success: boolean;
begin
    versionKey := version;
    versionRelease := 0;

    // .NET 1.1 and 2.0 embed release number in version key
    if version = 'v1.1' then begin
        versionKey := 'v1.1.4322';
    end else if version = 'v2.0' then begin
        versionKey := 'v2.0.50727';
    end

    // .NET 4.5 and newer install as update to .NET 4.0 Full
    else if Pos('v4.', version) = 1 then begin
        versionKey := 'v4\Full';
        case version of
          'v4.5':   versionRelease := 378389;
          'v4.5.1': versionRelease := 378675; // 378758 on Windows 8 and older
          'v4.5.2': versionRelease := 379893;
          'v4.6':   versionRelease := 393295; // 393297 on Windows 8.1 and older
          'v4.6.1': versionRelease := 394254; // 394271 before Win10 November Update
          'v4.6.2': versionRelease := 394802; // 394806 before Win10 Anniversary Update
          'v4.7':   versionRelease := 460798; // 460805 before Win10 Creators Update
        end;
    end;

    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + versionKey;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;

    // .NET 4.0 and newer use value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;

    // .NET 4.5 and newer use additional value Release
    if versionRelease > 0 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= versionRelease);
    end;

    result := success and (install = 1) and (serviceCount >= service);
end;






function IsDotNet4Detected(): Boolean;  //find version 4.5 or version 4 

// FROM: http://picksync.wordpress.com/2013/12/22/picksyncs-installer-inno-setup-and-the-net-framework/

begin
     	result := IsDotNetDetected('v4.7', 0);     
	if not result then result := IsDotNetDetected('v4\Full', 0);     
	if not result then result := IsDotNetDetected('v4\Client', 0); 
end;

function IsDotNet2Detected(): Boolean;  
begin //find versions 3.5 or 3 or 2     
	result := IsDotNetDetected('v3.5', 0);     
	if not result then result := IsDotNetDetected('v3.0', 0);     
	if not result then result := IsDotNetDetected('v2.0.50727', 0); 
end;


function DefaultAppDataFolder(Param: String): String;
begin
  
  //result := ExpandConstant('{userappdata}') + '\{#MyAppDataPathName}' 
  result := ExpandConstant('{commonappdata}') + '\{#MyAppDataPathName}'    

  //if IsUninstaller then
  //  result := ExtractFileDir(ExtractFileDir(ExpandConstant('{uninstallexe}')))
  //else
  //  result := ExpandConstant('{userappdata}') + '{#MyAppDataPathName}'
    //if (WizardInitialized) and
    //   (IsTaskSelected('localdir')) then
    //  result := ExpandConstant('{localappdata}') + '\Programs\{#MyAppDataPathName}'
    //else
    //  result := ExpandConstant('{commonappdata}') + '\Programs\{#MyAppDataPathName}';
end;




function InitializeSetup(): Boolean;
var
  ErrorCode: Integer;
begin
  result := true;    
  if (not IsDotNet4Detected) then   //(not IsDotNet2Detected) and 
  begin  
    if (MsgBox(ExpandConstant('{cm:dotnetmissing}'), mbConfirmation, MB_YESNO) = idYes) 
    then  
      begin    
        ShellExec('open', 
          'http://www.microsoft.com/en-au/download/details.aspx?id=42642', //'http://go.microsoft.com/fwlink/?LinkId=225704',
          '','',SW_SHOWNORMAL,ewNoWait,ErrorCode);    
      end;    
   result := false;  
  end;  
    

end;

//function InitializeSetup(): Boolean;
//begin
//    if not IsDotNetDetected('v4\Client', 0) then begin
//        MsgBox('MyApp requires Microsoft .NET Framework 4.0 Client Profile.'#13#13
//            'Please use Windows Update to install this version,'#13
//            'and then re-run the MyApp setup program.', mbInformation, MB_OK);
//        result := false;
//    end else
//        result := true;
//end;


function InitializeUninstall(): Boolean;
var
  ResultCode:Integer;
begin
   
   //MsgBox(ExpandConstant('{userappdata}' ) + '\'  + ExpandConstant('{#MyAppDataPathName}') + '\Uninstall.bat', mbInformation, MB_OK);

   //MsgBox(ExpandConstant('{app}' ) + '\Uninstall.bat', mbInformation, MB_OK);

  //Exec('cmd.exe', '/c "' + ExpandConstant('{app}' ) + '\Uninstall.bat','',SW_HIDE, ewWaitUntilTerminated, ResultCode);
  //Exec('cmd.exe', ' "' + ExpandConstant('{app}\Uninstall.bat"' ),'',SW_SHOW, ewWaitUntilTerminated, ResultCode);
  Exec(ExpandConstant('{app}\Uninstall.bat"'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);

  
//MsgBox(' ' + ResultCode + ' ', mbInformation, MB_OK);
  
  result := TRUE;
end;


procedure DeinitializeUninstall();
begin
  
    if (MsgBox(ExpandConstant('{cm:confirmdeletedata}'), mbConfirmation, MB_YESNO) = idYes) 
    then  
      begin    
        DeleteFile(ExpandConstant('{code:DefaultAppDataFolder}\Error.Log'));
        DeleteFile(ExpandConstant('{code:DefaultAppDataFolder}\Settings.xml'));
        RemoveDir(ExpandConstant('{code:DefaultAppDataFolder}'));    
        //     MsgBox(ExpandConstant('{code:DefaultAppDataFolder}'), mbConfirmation, MB_YESNO)
      end;

  
  

  //result := TRUE;
end;

